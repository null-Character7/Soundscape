generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  provider       Provider
  streams        Stream[]        @relation("UserStreams")
  upvotes        Upvote[]        @relation("UserUpvotes")
  currentStream  CurrentStream?  @relation("UserCurrentStream") // Optional reference to current stream
}

enum Provider {
  Google
}

model Stream {
  id            String          @id @default(uuid())
  type          StreamType
  url           String
  extractedId   String
  title         String
  active        Boolean         @default(true)
  userId        String
  user          User            @relation("UserStreams", fields: [userId], references: [id]) // No onDelete here
  upvotes       Upvote[]        @relation("StreamUpvotes") // No onDelete here
  currentStream CurrentStream?  @relation("StreamCurrentStream") // Optional reference to CurrentStream
  timesPlayed   Int             @default(0) // New field to track the number of times played
  playedDate    DateTime?       // New field to track the last played date
  thumbnailUrl  String?          // New field to store the URL of the video thumbnail
  artist        String?
  description   String?
}

enum StreamType {
  Spotify
  YouTube
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation("UserUpvotes", fields: [userId], references: [id], onDelete: Cascade) // Cascade delete when a user is deleted
  stream   Stream @relation("StreamUpvotes", fields: [streamId], references: [id], onDelete: Cascade) // Cascade delete when a stream is deleted

  @@unique([userId, streamId]) // Ensures that a user can upvote a stream only once
}

model CurrentStream {
  userId    String @id
  streamId  String @unique
  url       String
  user      User   @relation("UserCurrentStream", fields: [userId], references: [id], onDelete: Cascade) // Cascade delete when user is deleted
  stream    Stream @relation("StreamCurrentStream", fields: [streamId], references: [id], onDelete: Cascade) // Cascade delete when stream is deleted
}
